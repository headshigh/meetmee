// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod" // (default) the directory where generated zod schemas will be saved
  relationModel         = true // (default) Create and export both plain and related models.
  modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)
  modelSuffix           = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas
  useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Computer {
  id    String @id @default(cuid())
  brand String
  cores Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model eventType {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  hidden      Boolean
  length      String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Booking     Booking[]

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  eventType     eventType[]
  participating BookingUser[] // Association table for the many-to-many relationship for participant
  username      String        @unique
  password      String
  workingHours  String //"10:00-17:12"
  Booking       Booking[] //bookings a user has as owner
  timetable     timetable[]
  Reservation   Reservation[]
}

model Booking {
  id           Int           @id @default(autoincrement())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  eventTypeId  Int
  eventType    eventType     @relation(fields: [eventTypeId], references: [id])
  date         String
  startTime    String
  hostName     String
  hostEmail    String
  endTime      String
  createdAt    DateTime      @default(now())
  link         String?
  participants BookingUser[] // Association table for the many-to-many relationship

  @@index([userId])
  @@index([eventTypeId])
}

model BookingUser {
  bookingId Int
  userId    String
  booking   Booking @relation(fields: [bookingId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([bookingId, userId])
  @@index([bookingId]) // Add index for the foreign key field
  @@index([userId]) // Add index for the foreign key field
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model timetable {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  Sunday   String
  Monday   String
  Tuesday  String
  Wenesday String
  Thursday String
  Friday   String
  Saturday String

  @@unique([userId])
}

model Reservation {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  startTime String
  endTime   String
  date      String
}
